<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Demo</title>
    <style>
        input::-webkit-outer-spin-button, input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            moz-appearance: none;
            margin: 0;
        }


        label {
            display: inline-block;
            min-width: 90px;
        }

        input {
            border: 1px solid #ccc;
            padding: 6px;
            width: 40px;
            -webkit-border-radius: 3px;
        }

            /*input.ng-invalid {
                background-color: #f79;
                color: #000;
            }*/
    </style>
    <style>
        .form-group .help-block {
            display: none;
        }

        .form-group.has-error .help-block {
            display: block;
        }

        .dialogdemoBasicUsage #popupContainer {
            position: relative;
        }

        .dialogdemoBasicUsage .footer {
            width: 100%;
            text-align: center;
            margin-left: 20px;
        }

            .dialogdemoBasicUsage .footer, .dialogdemoBasicUsage .footer > code {
                font-size: 0.8em;
                margin-top: 50px;
            }

        .dialogdemoBasicUsage button {
            width: 200px;
        }

        .dialogdemoBasicUsage div#status {
            color: #c60008;
        }


        /*
        Copyright 2016 Google Inc. All Rights Reserved.
        Use of this source code is governed by an MIT-style license that can be in foundin the LICENSE file at http://material.angularjs.org/license.
        */
    </style>
</head>



<div ng-cloak ng-controller="AppCtrl" ng-app="MyApp">
    <md-toolbar md-scroll-shrink>
        <div class="md-toolbar-tools">Barangay Profile</div>
    </md-toolbar>

    <md-content>
        <md-tabs md-dynamic-height md-border-bottom>
            <md-tab label="Details">
                <md-content class="md-padding">
                    @Html.Partial("~/Views/Entry/BrgyProfile/_details.cshtml")
                </md-content>              
            </md-tab>
           <md-tab label="Population">






                <md-content class="md-padding">
                    
                        @Html.Partial("~/Views/Entry/BrgyProfile/_population.cshtml")
                
                </md-content>
            </md-tab>




    
            <md-tab label="Area Profile">





                <md-content class="md-padding">
                 
                        @Html.Partial("~/Views/Entry/BrgyProfile/_area_profile.cshtml")
                 
                </md-content>
            </md-tab>

    <md-tab label="Conflict">






        <md-content class="md-padding">

            @Html.Partial("~/Views/Entry/BrgyProfile/_conflict.cshtml")

        </md-content>
    </md-tab>





    <md-tab label="Financial Resources">

        <md-content class="md-padding">
            @Html.Partial("~/Views/Entry/MuniProfile/_financial.cshtml")
        </md-content>
    </md-tab>

    <md-tab label="Facilities">


 


        <md-content class="md-padding">
            <form name="facilityForm">

                @Html.Partial("~/Views/Entry/BrgyProfile/_facility.cshtml")
            </form>
        </md-content>
    </md-tab>


    <md-tab label="Problems">


 


        <md-content class="md-padding">

            @Html.Partial("~/Views/Entry/BrgyProfile/_problems.cshtml")

        </md-content>
    </md-tab>



    <md-tab label="Poverty Profile">



      


        <md-content class="md-padding">

            @Html.Partial("~/Views/Entry/BrgyProfile/_poverty_profile.cshtml")

        </md-content>
    </md-tab> 

            <md-tab label="Projects">






                <md-content class="md-padding">

                    @Html.Partial("~/Views/Entry/BrgyProfile/_brgy_dev_projects.cshtml")

                </md-content>
            </md-tab>
            @Html.Partial("~/Views/Entry/Common/_attachment.cshtml")




        </md-tabs>
        <md-content>


            <ul>
                <li ng-repeat="(key, errors) in myForm.$error track by $index">
                    <strong>{{ key }}</strong> Details Information
                    <ul>
                        <li ng-repeat="e in errors">{{ e.$name }} has an error: <strong>{{ key }}</strong>.</li>
                    </ul>
                </li>
                <li ng-repeat="(key, errors) in popForm.$error track by $index">
                    <strong>{{ key }}</strong> Population Information
                    <ul>
                        <li ng-repeat="e in errors">{{ e.$name }} has an error: <strong>{{ key }}</strong>.</li>
                    </ul>
                </li>
                <li ng-repeat="(key, errors) in areaForm.$error track by $index">
                    <strong>{{ key }}</strong> Area Profile Information
                    <ul>
                        <li ng-repeat="e in errors">{{ e.$name }} has an error: <strong>{{ key }}</strong>.</li>
                    </ul>
                </li>

            </ul>


            <md-container layout="row">

                <div flex="100" layout="row" layout-margin layout-sm="column">
                    <md-button class="md-primary md-raised" ng-click="save()" ng-disabled="!myForm.$valid || !popForm.$valid  || !areaForm.$valid">
                        Save
                    </md-button>

                    <md-button class="md-warn md-raised" href="/View/BarangayProfiles">
                        Cancel
                    </md-button>

                </div>
            </md-container>
        </md-content>
   
    </md-content>
  


</div>



@section Scripts
{
    <script src="~/scripts/directives/ngAppMax.js"></script>
    <script src="~/bower_components/BlockUI/jquery.blockUI.js"></script>
    <script>

        angular.module('MyApp', ['ngMaterial', 'ngMessages', 'material.svgAssetsCache', 'app-max'])

            .controller('AppCtrl', function ($scope, $mdDialog, $http, $mdToast) {


                $scope.data;


                $scope.$watch('data.is_armedconflict', function (newValue, oldValue) {

                    var record = $scope.data;


                    if (newValue != true) {

                      //  record.baragay_additiondetails = "";
                        //record.no_pantawid_household = 0;
                        //record.no_pantawid_family = 0;
                        //record.no_slp_household = 0;
                        //record.no_slp_family = 0;
                    }

                });


                $scope.maxYear = new Date().getFullYear();


                $http.get('/api/offline/v1/barangay_profile/get?id=@ViewBag.id')
          .then(function (response) {


              $scope.loading = true;

              $scope.data = response.data;

              $scope.data.profile_ = "brgy";
              

              $scope.data.region_code = $scope.data.region_code == 0 ? "" : $scope.data.region_code;
              $scope.data.prov_code = $scope.data.prov_code == 0 ? "" : $scope.data.prov_code;
              $scope.data.city_code = $scope.data.city_code == 0 ? "" : $scope.data.city_code;
              $scope.data.brgy_code = $scope.data.brgy_code == 0 ? "" : $scope.data.brgy_code;


              $scope.brgy_project_options = ["Barangay Fund", "Municipal Fund", "Provincial Fund", "National Gov't Agency", "ODA", "Others"];

              $scope.data.fund_source_id = $scope.data.fund_source_id == 0 ? "" : $scope.data.fund_source_id;

              $scope.data.cycle_id = $scope.data.cycle_id == 0 ? "" : $scope.data.cycle_id;


              $scope.data.financial_sources = [];// JSON.parse($scope.data.financial_sources);
              $scope.data.gad_activities = [];// = JSON.parse($scope.data.gad_activities);
              $scope.data.drrm_activities = [];// JSON.parse($scope.data.drrm_activities);
              $scope.data.ip_group_in_areas = [];
              $scope.data.eca_lists = [];
              $scope.data.brgy_project = [];



              if ($scope.data.other_source != null) {
                  $scope.data.financial_sources = JSON.parse($scope.data.other_source);
              }
              if ($scope.data.gad_activity != null) {
                  $scope.data.gad_activities = JSON.parse($scope.data.gad_activity);
              }
              if ($scope.data.drrm_activity != null) {
                  $scope.data.drrm_activities = JSON.parse($scope.data.drrm_activity);
              }


              if ($scope.data.ip_group_in_area != null) {
                  $scope.data.ip_group_in_areas = (JSON.parse($scope.data.ip_group_in_area));
              }
              if ($scope.data.eca_list != null) {
                  $scope.data.eca_lists = (JSON.parse($scope.data.eca_list));
              }
              if ($scope.data.brgy_projects != null) {
                  $scope.data.brgy_project = (JSON.parse($scope.data.brgy_projects));
              }

              $scope.check_status = function () {

                  $http.get('/api/exists/barangay_profile?id=@ViewBag.id')
                      .then(function (result) {


                          if (result.data == true) {
                              $scope.status = true;
                          } else {
                              $scope.status = false;

                          }
                      });

              }

              $scope.check_status();







              $scope.dt_date_intake = new Date(response.data.date_intake);
              $scope.dt_resolution_date = new Date(response.data.resolution_date);

              $http.get('/api/online/lib_region')
         .then(function (response) { $scope.region_code_options = response.data; });

              $http.get('/Api/lib_fund_source/')
      .then(function (response) { $scope.fund_source_id_options = response.data; });




              $http.get('/Api/lib_ip_group/')
      .then(function (response) { $scope.ip_group_id_options = response.data; });

              $http.get('/Api/lib_transpo_mode/')
.then(function (response) { $scope.transpo_mode_id_options = response.data; });



              $scope.list_eca = [];


              $http.get('/Api/lib_eca_type/')
                    .then(function (response) {
                        $scope.eca_type_id_options = response.data;
                    });

              $scope.loading = false;

              $scope.edit = function () {
                  this.editMode = !this.editMode;
              };


              $scope.cancel = function () {

                  $http.get('/api/v1/barangay_profile/get?id=@ViewBag.id')
            .then(function (response) {

                //            this.editMode = false;

                $scope.data = response.data;

                $scope.dt_intake_date = new Date(response.data.intake_date);
                $scope.dt_resolution_date = new Date(response.data.resolution_date);
            });
              }

              //ATTACHMENTS

              $http.get('/api/attachment_list?id=32')
              .then(function (response) {
                  $scope.attachment_list = response.data;
              });

              $scope.attached_documents = [];
              $scope.attachment = {};
              $scope.attachment.mov_list_id = null;

              $scope.uploadAttachment = function () {

                  if ($scope.attached_documents.filter(function (e) { return e.mov_list_id == $scope.attachment.mov_list_id; }).length > 0) {
                      alert("Only single attachment is allowed for Barangay Profile Form.");
                      $scope.attachment = {};
                  }

                  else {
                      $.blockUI({ message: '<br>Processing...<br><br>' });

                      var fileUpload = $("#files").get(0);
                      var files = fileUpload.files;
                      var data = new FormData();
                      for (var i = 0; i < files.length ; i++) {
                          data.append(files[i].name, files[i]);
                      }

                      $.ajax({
                          type: "POST",
                          url: "/Mov/UploadFilesAjax?id="
                              + '@ViewBag.id'
                              + "&mov_list_id=" + $scope.attachment.mov_list_id
                              + "&region_code=" + $scope.data.region_code
                              + "&prov_code=" + $scope.data.prov_code
                              + "&city_code=" + $scope.data.city_code
                              + "&brgy_code=" + $scope.data.brgy_code
                              + "&fund_source_id=" + $scope.data.fund_source_id
                              + "&cycle_id=" + $scope.data.cycle_id
                              + "&enrollment_id=",
                          contentType: false,
                          processData: false,
                          data: data,
                          success: function (message) {
                              var base = window.location.origin;
                              message.url = base + "/MOVs/" + message.attached_document_id + ".pdf";
                              $scope.attached_documents.push(message);
                              $scope.attachment = {};
                              setTimeout($.unblockUI, 3);
                              angular.element("input[type='file']").val(null);
                          },
                          error: function (message) {
                              alert(JSON.stringify(message.responseText));
                          }
                      });
                  }

              } //end of uploadAttachment function
                  

              $.post('/api/mov/get/uploaded?id=' + '@ViewBag.id')
                 .success(function (value) {
                     $scope.attached_documents = value;
                     angular.forEach($scope.attached_documents, function (item) {
                         var base = window.location.origin;
                         item.url = base + "/MOVs/" + item.attached_document_id + ".pdf";
                     })
                 });

              $scope.deleteMov = function (removeitem) {
                  var ask = confirm("Are you sure you want to Delete attachment? This will also be deleted on the MOVs folder.");
                  if (ask == true) {
                      $.post('/api/delete/attached_document?id=' + removeitem.attached_document_id).success(function (value) {
                          $scope.loading = false;
                          //$scope.check_button_is_disabled = false;
                          var index = $scope.attached_documents.indexOf(removeitem);
                          $scope.attached_documents.splice(index, 1);
                          alert("Attachment removed!")

                      }).error(function (data) {
                          alert(JSON.stringify(data));
                          $scope.error = "An Error has occured while Deleting! " + data.statusText;
                          $scope.loading = false;
                      });
                  }
              }
              //END ATTACHMENTS



              //-------------- Enhancement: 6-20-17 Add edit for FINANCIAL RESOURCES > Financial Source

              $scope.addFinancial = function () {
                  $scope.data.financial_sources.push($scope.item);
                  $scope.item = {};
              };

              $scope.removeFinancial = function (financial) {
                  $scope.data.financial_sources.splice(financial, 1);
              };

              $scope.editFinancial = function (financial) {
                  $scope.editing = $scope.data.financial_sources.indexOf(financial);
                  financial.backupName = angular.copy(financial.name);
                  financial.backupAmount = angular.copy(financial.amount);
              };

              $scope.saveEditedFinancial = function (financial) {
                  delete financial.backupName;
                  delete financial.backupAmount;
              };
              
              $scope.cancelEditFinancial = function (financial) {
                  financial.name = angular.copy(financial.backupName);
                  financial.amount = angular.copy(financial.backupAmount);
                  delete financial.backupName;
                  delete financial.backupAmount;
              };

              $scope.computeFinancialSourcesTotal = function (sum) {
                  var total = 0;
                  var ira_amount = $scope.data.ira_amount;
                  angular.forEach($scope.data.financial_sources, function (el) {
                      total += el[sum];
                  });
                  return total + ira_amount;
              };


              //-------------- Enhancement: 6-20-17 Add edit for FINANCIAL RESOURCES > GAD Utilization

              $scope.addGad = function () {
                  $scope.data.gad_activities.push($scope.gad);
                  $scope.gad = {};
              };

              $scope.removeGad = function (gad) {
                  $scope.data.gad_activities.splice(gad, 1);
              };

              $scope.editGad = function (gad) {
                  $scope.editing = $scope.data.gad_activities.indexOf(gad);
                  gad.backupGadActivity = angular.copy(gad.name);
                  gad.backupGadAmount = angular.copy(gad.amount);
              };

              $scope.saveEditedGad = function (gad) {
                  delete gad.backupGadActivity;
                  delete gad.backupGadAmount;
              };

              $scope.cancelEditGad = function (gad) {
                  gad.name = angular.copy(gad.backupGadActivity);
                  gad.amount = angular.copy(gad.backupGadAmount);
                  delete gad.backupGadActivity;
                  delete gad.backupGadAmount;
              };

              $scope.computeGadTotal = function (sum) {
                  var total = 0;
                  angular.forEach($scope.data.gad_activities, function (el) {
                      total += el[sum];
                  });
                  return total;
              };


              //-------------- Enhancement: 6-20-17 Add edit for FINANCIAL RESOURCES > DRRM Utilization

              $scope.addDRRM = function () {
                  $scope.data.drrm_activities.push($scope.drrm);
                  $scope.drrm = {};
              };

              $scope.removeDRRM = function (drrm) {
                  $scope.data.drrm_activities.splice(drrm, 1);
              };

              $scope.editDRRM = function (drrm) {
                  $scope.editing = $scope.data.drrm_activities.indexOf(drrm);
                  drrm.backupDRRMActivity = angular.copy(drrm.name);
                  drrm.backupDRRMAmount = angular.copy(drrm.amount);
              };

              $scope.saveEditedDRRM = function (drrm) {
                  delete drrm.backupDRRMActivity;
                  delete drrm.backupDRRMAmount;
              };

              $scope.cancelEditDRRM = function (drrm) {
                  drrm.name = angular.copy(drrm.backupDRRMActivity);
                  drrm.amount = angular.copy(drrm.backupDRRMAmount);
                  delete drrm.backupDRRMActivity;
                  delete drrm.backupDRRMAmount;
              };

              $scope.computeDRRMTotal = function (sum) {
                  var total = 0;
                  angular.forEach($scope.data.drrm_activities, function (el) {
                      total += el[sum];
                  });
                  return total;
              };



              //$scope.addDrrm = function () {




              //    $scope.data.drrm_activities.push($scope.drrm);



              //    $scope.drrm = {};
              //}

              //$scope.removeDrrm = function (index) {

              //    $scope.data.drrm_activities.splice(index, 1);


              //}



              //-------------- Enhancement: 08-08-17 Add edit for Population > INDIGENOUS PEOPLE

              $scope.addIpGroup = function () {
                  $scope.data.ip_group_in_areas.push($scope.grp);
                  $scope.grp = {};
              };

              $scope.removeIPGroup = function (grp) {
                  $scope.data.ip_group_in_areas.splice(grp, 1);
              };

              $scope.editIPGroup = function (grp) {
                  $scope.editing = $scope.data.ip_group_in_areas.indexOf(grp);
                  grp.backupGrpName = angular.copy(grp.lib_ip_group.Name);
                  grp.backupSitio = angular.copy(grp.sitio);
                  grp.backupHH = angular.copy(grp.household);
                  grp.backupFamily = angular.copy(grp.family);
                  grp.backupMale = angular.copy(grp.male);
                  grp.backupFemale = angular.copy(grp.female);
              };

              $scope.saveEditedIPGroup = function (grp) {
                  delete grp.backupGrpName;
                  delete grp.backupSitio;
                  delete grp.backupHH;
                  delete grp.backupFamily;
                  delete grp.backupMale;
                  delete grp.backupFemale;
              };

              $scope.cancelEditIPGroup = function (grp) {
                  grp.lib_ip_group.Name = angular.copy(grp.backupGrpName);
                  grp.sitio = angular.copy(grp.backupSitio);
                  grp.household = angular.copy(grp.backupHH);
                  grp.family = angular.copy(grp.backupFamily);
                  grp.male = angular.copy(grp.backupMale);
                  grp.female = angular.copy(grp.backupFemale);
                  delete grp.backupGrpName;
                  delete grp.backupSitio;
                  delete grp.backupHH;
                  delete grp.backupFamily;
                  delete grp.backupMale;
                  delete grp.backupFemale;
              };




              //$scope.addIpGroup = function () {

              //    $scope.data.ip_group_in_areas.push($scope.groups);



              //    $scope.groups = {};
              //}

              //$scope.removeIPGroup = function (index) {

              //    $scope.data.ip_group_in_areas.splice(index, 1);


              //}


              //-------------- Enhancement: 08-08-17 Add edit for Area Profile > Environmental Critical Areas (ECA)

              $scope.addEca = function () {
                  $scope.data.eca_lists.push($scope.eca);
                  $scope.eca = {};
              };

              $scope.removeEca = function (eca) {
                  $scope.data.eca_lists.splice(eca, 1);
              };

              $scope.editEca = function (eca) {
                  $scope.editing = $scope.data.eca_lists.indexOf(eca);
                  eca.backupTypeName = angular.copy(eca.lib_eca_type.Name);
                  eca.backupDesc = angular.copy(eca.description);
                  eca.backupLocation = angular.copy(eca.location);
              };

              $scope.saveEditedEca = function (eca) {
                  delete eca.backupTypeName;
                  delete eca.backupDesc;
                  delete eca.backupLocation;
              };

              $scope.cancelEditEca = function (eca) {
                  eca.lib_eca_type.Name = angular.copy(eca.backupTypeName);
                  eca.description = angular.copy(eca.backupDesc);
                  eca.location = angular.copy(eca.backupLocation);
                  delete eca.backupTypeName;
                  delete eca.backupDesc;
                  delete eca.backupLocation;
              };


              //$scope.addEca = function () {

              //    $scope.data.eca_lists.push($scope.eca_model);

              //    $scope.eca_model = {};
              //}

              //$scope.removeEca = function (index) {

              //    $scope.data.eca_lists.splice(index, 1);

              //}


              //-------------- Enhancement: 08-09-17 Add edit for Projects tab > BRGY DEVELOPMENT PROJECTS

              $scope.addBrgyProject = function () {
                  $scope.data.brgy_project.push($scope.proj);
                  $scope.proj = {};
              };

              $scope.removeBrgyProject = function (proj) {
                  $scope.data.brgy_project.splice(proj, 1);
              };

              $scope.editBrgyProject = function (proj) {
                  $scope.editing = $scope.data.brgy_project.indexOf(proj);
                  proj.backupProjName = angular.copy(proj.name);
                  proj.backupProjLocation = angular.copy(proj.location);
                  proj.backupProjScope = angular.copy(proj.scope);
                  proj.backupProjCost = angular.copy(proj.cost);
                  proj.backupProjSource = angular.copy(proj.source);
                  proj.backupProjSharing = angular.copy(proj.sharing);
                  proj.backupProjMale = angular.copy(proj.male);
                  proj.backupProjFemale = angular.copy(proj.female);
              };

              $scope.saveEditedBrgyProject = function (proj) {
                  delete proj.backupProjName;
                  delete proj.backupProjLocation;
                  delete proj.backupProjScope;
                  delete proj.backupProjCost;
                  delete proj.backupProjSource;
                  delete proj.backupProjSharing;
                  delete proj.backupProjMale;
                  delete proj.backupProjFemale;
              };

              $scope.cancelEditBrgyProject = function (proj) {
                  proj.name = angular.copy(proj.backupProjName);
                  proj.location = angular.copy(proj.backupProjLocation);
                  proj.scope = angular.copy(proj.backupProjScope);
                  proj.cost = angular.copy(proj.backupProjCost);
                  proj.source = angular.copy(proj.backupProjSource);
                  proj.sharing = angular.copy(proj.backupProjSharing);
                  proj.male = angular.copy(proj.backupProjMale);
                  proj.female = angular.copy(proj.backupProjFemale);
                  delete proj.backupProjName;
                  delete proj.backupProjLocation;
                  delete proj.backupProjScope;
                  delete proj.backupProjCost;
                  delete proj.backupProjSource;
                  delete proj.backupProjSharing;
                  delete proj.backupProjMale;
                  delete proj.backupProjFemale;
              };



              //$scope.addBrgyProject = function () {
              //    $scope.data.brgy_project.push($scope.proj);
              //    $scope.proj = {};
              //}

              //$scope.removeBrgyProject = function (index) {
              //    $scope.data.brgy_project.splice(index, 1);
              //}




              $scope.save = function () {
                  $scope.$broadcast('show-errors-check-validity');
                  $scope.loading = true;
                  //       alert(JSON.stringify($scope.data));

                  //'/api/v1/grievances/save'
                  $scope.data.other_source = JSON.stringify($scope.data.financial_sources);
                  $scope.data.gad_activity = JSON.stringify($scope.data.gad_activities);
                  $scope.data.drrm_activity = JSON.stringify($scope.data.drrm_activities);
                  $scope.data.ip_group_in_area = JSON.stringify($scope.data.ip_group_in_areas);
                  $scope.data.eca_list = JSON.stringify($scope.data.eca_lists);
                  $scope.data.brgy_projects = JSON.stringify($scope.data.brgy_project);
                  $.post('/api/offline/v1/barangay_profile/save', $scope.data).success(function (data) {
                      $scope.loading = false;
                      $('html, body').animate({ scrollTop: '0px' }, 1500);
                      $mdToast.show(
                          $mdToast.simple()
                          .textContent('Record Saved!')
                          .position("top right")
                          .hideDelay(3000)
                      );


                  }).error(function (data) {

                      alert(JSON.stringify(data));


                      $scope.error = "An Error has occured while Saving! " + data.statusText;
                      $scope.loading = false;
                  });
              };
          });




                $scope.$watch('data.region_code', function (newValue, oldValue) {



                    var record = $scope;

                    if (newValue == null) {
                        record.prov_code = null;
                        record.city_code = null;
                        record.brgy_code = null;


                        record.prov_code_options = [];
                        record.city_code_options = [];
                        record.brgy_code_options = [];
                    }
                    else {

                        $http({
                            method: 'GET',
                            url: '/api/online/lib_province?id=' + newValue,

                        }).success(function (data, status, headers, config) {

                            $scope.prov_code_options = data;
                        }).error(function (data, status, headers, config) {

                            $scope.message = 'Unexpected Error';
                        });
                    }

                });

                $scope.$watch('data.prov_code', function (newValue, oldValue) {

                    var record = $scope;

                    if (newValue == null) {

                        record.brgy_code = null;
                        record.city_code = null;
                        record.city_code_options = [];
                        record.brgy_code_options = [];
                    }

                    else {
                        $http({
                            method: 'GET',
                            url: '/api/online/lib_city?id=' + newValue,

                        }).success(function (data, status, headers, config) {

                            $scope.city_code_options = data;
                        }).error(function (data, status, headers, config) {

                            $scope.message = 'Unexpected Error';
                        });
                    }

                });

                $scope.$watch('data.city_code', function (newValue, oldValue) {

                    var record = $scope;

                    if (newValue == null) {

                        record.brgy_code = null;

                        record.brgy_code_options = [];
                    }

                    else {
                        $http({
                            method: 'GET',
                            url: '/api/online/lib_brgy?id=' + newValue,

                        }).success(function (data, status, headers, config) {

                            $scope.brgy_code_options = data;
                        }).error(function (data, status, headers, config) {

                            $scope.message = 'Unexpected Error';
                        });
                    }

                });


                $scope.$watch('data.fund_source_id', function (newValue, oldValue) {

                    var record = $scope;

                    if (newValue == null) {

                        record.cycle_id = null;

                        record.cycle_id_options = [];
                    }

                    else {
                        $http({
                            method: 'GET',
                            url: '/api/lib_cycle?id=' + newValue,

                        }).success(function (data, status, headers, config) {

                            $scope.cycle_id_options = data;
                        }).error(function (data, status, headers, config) {

                            $scope.message = 'Unexpected Error';
                        });
                    }

                });


            })

        .directive('showErrors', function ($timeout, showErrorsConfig) {
            var getShowSuccess, linkFn;
            getShowSuccess = function (options) {
                var showSuccess;
                showSuccess = showErrorsConfig.showSuccess;
                if (options && options.showSuccess != null) {
                    showSuccess = options.showSuccess;
                }
                return showSuccess;
            };
            linkFn = function (scope, el, attrs, formCtrl) {
                var blurred, inputEl, inputName, inputNgEl, options, showSuccess, toggleClasses;
                blurred = false;
                options = scope.$eval(attrs.showErrors);
                showSuccess = getShowSuccess(options);
                inputEl = el[0].querySelector('[name]');
                inputNgEl = angular.element(inputEl);
                inputName = inputNgEl.attr('name');
                if (!inputName) {
                    throw 'show-errors element has no child input elements with a \'name\' attribute';
                }
                inputNgEl.bind('blur', function () {
                    blurred = true;
                    return toggleClasses(formCtrl[inputName].$invalid);
                });
                scope.$watch(function () {
                    return formCtrl[inputName] && formCtrl[inputName].$invalid;
                }, function (invalid) {
                    if (!blurred) {
                        return;
                    }
                    return toggleClasses(invalid);
                });
                scope.$on('show-errors-check-validity', function () {
                    return toggleClasses(formCtrl[inputName].$invalid);
                });
                scope.$on('show-errors-reset', function () {
                    return $timeout(function () {
                        el.removeClass('has-error');
                        el.removeClass('has-success');
                        return blurred = false;
                    }, 0, false);
                });
                return toggleClasses = function (invalid) {
                    el.toggleClass('has-error', invalid);
                    if (showSuccess) {
                        return el.toggleClass('has-success', !invalid);
                    }
                };
            };
            return {
                restrict: 'A',
                require: '^form',
                compile: function (elem, attrs) {
                    if (!elem.hasClass('form-group')) {
                        throw 'show-errors element does not have the \'form-group\' class';
                    }
                    return linkFn;
                }
            };
        }
      )

        .provider('showErrorsConfig', function () {
            var _showSuccess;
            _showSuccess = false;
            this.showSuccess = function (showSuccess) {
                return _showSuccess = showSuccess;
            };
            this.$get = function () {
                return { showSuccess: _showSuccess };
            };
        });



        /**
        Copyright 2016 Google Inc. All Rights Reserved.
        Use of this source code is governed by an MIT-style license that can be in foundin the LICENSE file at http://material.angularjs.org/license.
        **/

    </script>


}




</body>