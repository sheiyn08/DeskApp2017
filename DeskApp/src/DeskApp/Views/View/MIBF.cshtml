@{ ViewBag.Title = "List of MIBF";

    ViewBag.Controller = "View MIBF";

}

<script src="~/Scripts/jquery-2.0.3.js"></script>
<script src="~/bower_components/BlockUI/jquery.blockUI.js"></script>
<script src="~/bower_components/BlockUI/jquery.toDictionary.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

<script src="~/bower_components/Knockout/knockout-3.1.0.js"></script>
<script src="~/bower_components/Knockout/knockout.bindings.js"></script>
<script src="~/bower_components/Knockout/knockout.mapping-latest.js"></script>
<script src="~/bower_components/Knockout/knockout.validation.js"></script>

<div class="box box-primary">
    <div class="box-header">
        <h3 class="box-title">Filter</h3>
    </div>
    <form role="form">
        <div class="box-body">

            <div class="row">
                @Html.Partial("~/Views/Filters/_region_filter.cshtml")

                @Html.Partial("~/Views/Filters/_province_filter.cshtml")

                @Html.Partial("~/Views/Filters/_municipality_filter.cshtml")

           
            </div>

            <div class="row">
                @Html.Partial("~/Views/Filters/_fund_source_filter.cshtml")

                @Html.Partial("~/Views/Filters/_cycle_filter.cshtml")

                @Html.Partial("~/Views/Filters/_enrollment_filter.cshtml")
            </div>


        </div>
        <div class="box-footer">

            @Html.Partial("~/Views/Filters/_Buttons/_filter.cshtml")
            @Html.Partial("~/Views/Filters/_Buttons/_clear.cshtml")


            @Html.Partial("~/Views/Filters/_Buttons/_export.cshtml")











        </div>
    </form>
</div>

<div id="result" class="scrolls">

</div>


<script>

    var dataarray;


    var mapping = {
        'ignore': [
        "lib_regions", 
        "lib_fund_sources", 
        "lib_cycles", 
        "lib_enrollments", 
        "lib_barangay_assembly_purposes", 
        "ncddp_groupings", 
        "lib_volunteer_committees", 
        "lib_volunteer_committee_positions", 
        "lib_training_category", 

        "lib_grs_intake_levels", 
        "lib_grs_forms", 
        "lib_grs_filling_modes", 
        "lib_grs_complainant_positions", 
        "lib_grs_resolution_statuses", 
        "lib_grs_feedbacks", 
        "lib_grs_categories", 
        "lib_grs_complaint_subjects", 
        "lib_grs_natures", 
        "lib_ip_groups", 
        "lib_spi_nature_works"


              

        ]
    };



    var ViewModel = function (data) {
        var self = this;
        dataarray =  @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        ko.mapping.fromJS(dataarray, {}, self);

        self.filter = function () {
            var data = ko.mapping.toJS(self);
        }
      

        ko.bindingHandlers.selectPicker = {
            init: function (element, valueAccessor, allBindingsAccessor) {
                if ($(element).is('select')) {
                    if (ko.isObservable(valueAccessor())) {
                        if ($(element).prop('multiple') && $.isArray(ko.utils.unwrapObservable(valueAccessor()))) {
                            // in the case of a multiple select where the valueAccessor() is an observableArray, call the default Knockout selectedOptions binding
                            ko.bindingHandlers.selectedOptions.init(element, valueAccessor, allBindingsAccessor);
                        } else {
                            // regular select and observable so call the default value binding
                            ko.bindingHandlers.value.init(element, valueAccessor, allBindingsAccessor);
                        }
                    }
                    $(element).addClass('selectpicker').selectpicker();
                }
            },
            update: function (element, valueAccessor, allBindingsAccessor) {
                if ($(element).is('select')) {
                    var selectPickerOptions = allBindingsAccessor().selectPickerOptions;
                    if (typeof selectPickerOptions !== 'undefined' && selectPickerOptions !== null) {
                        var options = selectPickerOptions.optionsArray,
                            optionsText = selectPickerOptions.optionsText,
                            optionsValue = selectPickerOptions.optionsValue,
                            optionsCaption = selectPickerOptions.optionsCaption,
                            isDisabled = selectPickerOptions.disabledCondition || false,
                            resetOnDisabled = selectPickerOptions.resetOnDisabled || false;
                        if (ko.utils.unwrapObservable(options).length > 0) {
                            // call the default Knockout options binding
                            ko.bindingHandlers.options.update(element, options, allBindingsAccessor);
                        }
                        if (isDisabled && resetOnDisabled) {
                            // the dropdown is disabled and we need to reset it to its first option
                            $(element).selectpicker('val', $(element).children('option:first').val());
                        }
                        $(element).prop('disabled', isDisabled);
                    }
                    if (ko.isObservable(valueAccessor())) {
                        if ($(element).prop('multiple') && $.isArray(ko.utils.unwrapObservable(valueAccessor()))) {
                            // in the case of a multiple select where the valueAccessor() is an observableArray, call the default Knockout selectedOptions binding
                            ko.bindingHandlers.selectedOptions.update(element, valueAccessor);
                        } else {
                            // call the default Knockout value binding
                            ko.bindingHandlers.value.update(element, valueAccessor);
                        }
                    }

                    $(element).selectpicker('refresh');
                }
            }
        };

        //arrays
        self.ItemsPerPage = ko.observableArray([10,20,30,40,50,100]);
        self.lib_regions = ko.observableArray([]);
        self.lib_provinces = ko.observableArray([]);
        self.lib_cities = ko.observableArray([]);
        self.lib_brgy = ko.observableArray([]);
        self.lib_fund_sources = ko.observableArray([]);
        self.lib_cycles = ko.observableArray([]);
        self.lib_barangay_assembly_purposes = ko.observableArray([]);
        self.lib_enrollments = ko.observableArray([]);
        self.selected_regions = ko.observableArray([]);
        self.selected_fund_sources = ko.observableArray([]);

        self.lib_regions(dataarray.lib_regions);
        self.lib_fund_sources(dataarray.lib_fund_sources);
        self.lib_barangay_assembly_purposes(dataarray.lib_barangay_assembly_purposes);
        self.lib_enrollments(dataarray.lib_enrollments);


        //observables
        self.region_code = ko.observable('');
        self.prov_code = ko.observable('');
        self.city_code = ko.observable('');
        self.brgy_code = ko.observable('');
        self.cycle_id = ko.observable('');
        self.enrollment_id = ko.observable('');
        self.fund_source_id = ko.observable('');
        self.barangay_assembly_purpose_id = ko.observable('');


        //subscribe
        self.fund_source_id.subscribe(function (newval) {


            if (self.fund_source_id() == '') {
                self.lib_cycles(undefined);
            }
            else {


                $.post("/Library/GetCycle", { id: self.fund_source_id() }, function (states) {
                    self.lib_cycles(states);
                });


            }
        })

        self.region_code.subscribe(function (newval) {


            if (self.region_code() == '') {
                self.lib_provinces(undefined);
                self.lib_cities(undefined);
                self.lib_brgy(undefined);
            }
            else {


                $.post("/Library/GetProvinces", { id: self.region_code() }, function (states) {
                    self.lib_provinces(states);
                });


            }
        })

        self.prov_code.subscribe(function (newval) {
            $.post("/Library/GetCity", { id: self.prov_code() }, function (states) {
                self.lib_cities(states);
            })

        })

      

        self.clear = function()
        {

            window.location.reload();

        }

        self.filter =  function () {



            $.blockUI({ message: '<h1><img src="@Url.Content("~/Content/Images/loading.gif")" /></h1> Processing...' });
             


            var data = JSON.stringify(ko.mapping.toJS(self,mapping));


            var url = "/View/_mibf?item=" + data;

            $.ajax({
                type: "GET",
                url: url,
                //  data: someArguments,31
                success: function (viewHTML) {
                    $("#result").html(viewHTML);
                    setTimeout($.unblockUI, 100);

                },
                error: function (errorData) { onError(errorData); }
            });
        }

        self.exportXls = function() {


            $.blockUI({ message: '<h1><img src="@Url.Content("~/Content/Images/loading.gif")" /></h1> Processing...' });


            var data = JSON.stringify(ko.mapping.toJS(self,mapping));


            $.ajax({
                type: "POST",
                url: "/Export/mibf",// + Params,
                data: {
                    item: data,

                },
                success: function (viewHTML) {
                    window.location.href = "/Export/GetExcel?id=" + viewHTML;
                    setTimeout($.unblockUI, 10);

                },
                error: function (errorData) {
                    onError(errorData);
                    setTimeout($.unblockUI, 10);
                }

            });


        }
    }

    $(document).ready(function () {
        ko.applyBindings(new ViewModel());



        $("#filter").trigger('click');


    });

</script>
